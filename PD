//Proximity Detection


import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.IBinder;
import android.view.KeyEvent;
import android.widget.Toast;

public class PD extends Service implements SensorEventListener {

	static SensorManager S;
	static Sensor P;

	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		// TODO Auto-generated method stub
		
			Toast.makeText(PD.this, "Answering Service Running", Toast.LENGTH_SHORT)
			.show();
			
			S = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
			P = S.getDefaultSensor(Sensor.TYPE_PROXIMITY);

			S.registerListener(this, P,
					SensorManager.SENSOR_DELAY_GAME);
		
		return super.onStartCommand(intent, flags, startId);
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		// TODO Auto-generated method stub
		if (event.sensor.getType() == Sensor.TYPE_PROXIMITY) {


			double v = Double.parseDouble(String.valueOf(event.values[0]));
			Global global = (Global) getApplicationContext();
			String s = global.getVar1();

			if(s == "Off Hook" || s == "Idle"){
				
				S.unregisterListener(this, P);
				stopSelf();

			}
			else if (v == 0.0) {

				try {

			// force answer for root		
			/*		Process process = Runtime.getRuntime().exec(
							new String[] { "su", "-c", "input keyevent 5" });
					process.waitFor();
			*/
				
				
				Intent buttonUp = new Intent(Intent.ACTION_MEDIA_BUTTON);
			    buttonUp.putExtra(Intent.EXTRA_KEY_EVENT, new KeyEvent(
			            KeyEvent.ACTION_UP, KeyEvent.KEYCODE_HEADSETHOOK));
			    sendOrderedBroadcast(buttonUp, "android.permission.CALL_PRIVILEGED");
				
					Toast.makeText(PD.this, "Answered Call", Toast.LENGTH_SHORT).show();
					
					Thread.sleep(10);
					
					S.unregisterListener(this, P);

					stopSelf();

					

				} catch (Exception e) {
					e.printStackTrace();
				}

			}
			

		}

	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub

	}

	protected void onResume() {
		// Register a listener for the sensor.

		S.registerListener(this, P,
				SensorManager.SENSOR_DELAY_GAME);
	}

	protected void onPause() {
		// Be sure to unregister the sensor when the activity pauses.

		S.unregisterListener(this);
	}

}
